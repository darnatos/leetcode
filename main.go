package main

import (
	"fmt"
	"leetcode/solution"
)

func main() {
	//fmt.Println(solution.ReformatDate("6th Jun 1933"))
	//fmt.Println(solution.LongestSubsequence([]int{1, 5, 7, 8, 5, 3, 4, 2, 1}, -2))
	//fmt.Println(solution.LongestSubsequence([]int{1, 2, 3, 4}, 1))
	//fmt.Println(solution.RemoveDuplicates([]int{}))
	//nums := []int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}
	//k := solution.RemoveDuplicates(nums)
	//fmt.Println(k)
	//fmt.Println(nums[:k])
	//fmt.Println(solution.SmallestChair([][]int{{3, 10}, {1, 5}, {2, 6}}, 0), " should be ", 2)
	//fmt.Println(solution.SmallestChair([][]int{{33889, 98676}, {80071, 89737}, {44118, 52565}, {52992, 84310}, {78492, 88209}, {21695, 67063}, {84622, 95452}, {98048, 98856}, {98411, 99433}, {55333, 56548}, {65375, 88566}, {55011, 62821}, {48548, 48656}, {87396, 94825}, {55273, 81868}, {75629, 91467}}, 6), " should be ", 2)
	//boxes := [...]int{2, 5, 10, 9, 4, 8, 6, 9, 9, 1}
	//fmt.Println("expected", 16, "and got", solution.RemoveBoxes(boxes[:]))

	//ll := myLinkedList.Constructor()
	//ll.AddAtTail(1)
	//ll.Print()
	//ll.AddAtHead(2)
	//ll.Print()
	//ll.AddAtIndex(2, 3)
	//ll.Print()
	//ll.Get(0)

	//fmt.Printf("%f\n", solution.LargestTriangleArea([][]int{{-2, -11}, {99, 71}, {1, 4}, {0, 2}, {1, 0}, {2, 0}, {3, 5}, {4, 7}}))
	//fmt.Println(solution.CheckIfCanBreak("xyz", "sab"))
	//fmt.Println(solution.IsValidParentheses("()([]){}[]"))
	//fmt.Println(solution.CanFinish(3, [][]int{{0, 1}, {0, 2}, {1, 2}}))
	//fmt.Println(solution.NumRollsToTargetRecur(4, 6, 12))
	//fmt.Println(solution.NumRollsToTargetDP(4, 6, 12))
	//fmt.Println(solution.MinDistance("intention", "execution"))
	//fmt.Println(solution.ArrayRankTransform([]int{1235, 33, 2553, 12, 133, 133, 256}))
	//fmt.Println(solution.NumIslands([][]byte{{'1', '1', '1', '1', '0'}, {'1', '1', '0', '1', '0'}, {'1', '1', '0', '0', '0'}, {'0', '0', '0', '0', '0'}}))
	//fmt.Println(solution.MinEatingSpeed([]int{3, 6, 7, 11}, 8))
	//fmt.Println(solution.StrStr("hello", "ll"))
	//fmt.Println(solution.FindMedianSortedArrays([]int{1, 1, 2, 3}, []int{2, 4}))
	//fmt.Println(solution.FindMedianSortedArrays([]int{1,3}, []int{2, 4}))
	//fmt.Println(solution.FindMedianSortedArrays([]int{1,3}, []int{2}))
	//fmt.Println(solution.FindMedianSortedArrays([]int{0, 0}, []int{0, 0}))
	//fmt.Println(solution.FindMedianSortedArrays([]int{}, []int{1}))
	//fmt.Println(solution.FindMedianSortedArrays([]int{2}, []int{}))
	//fmt.Println(solution.ThreeSumClosest([]int{0, 2, 1, -3}, 1))
	//fmt.Println(solution.NumPermsDISequence("DDD"))
	//fmt.Println(solution.ZigzagConvert("PAYPALISHIRING", 3))
	//fmt.Println(solution.OrangesRotting([][]int{{2, 1, 1}, {1, 1, 0}, {0, 1, 2}}))
	//fmt.Println(solution.LargestSumOfAverages([]int{1, 5, 3, 6, 7, 9, 13, 2}, 4))
	//fmt.Println(solution.ThousandSeparator(1987))
	//fmt.Println(solution.LongestPalindrome("qqwerbobxdbobdxerewqweasdx"))
	//fmt.Println(solution.OrangesRotting([][]int{{2, 1, 1}, {1, 1, 0}, {0, 1, 2}}))
	//fmt.Println(solution.MinDominoRotations([]int{2, 2, 2, 2, 1, 1, 2, 2, 1, 1}, []int{1, 1, 1, 2, 2, 2, 2, 2, 2, 2}))
	//fmt.Println(solution.MinimumTotal([][]int{{2}, {3, 4}, {6, 5, 7}, {4, 1, 8, 3}}))
	//fmt.Println(solution.Maximum69Number(6969))
	//fmt.Println(solution.NumSubarraysWithSum2P([]int{0, 0, 0, 0, 0, 1, 0, 0, 0}, 0))
	//fmt.Println(solution.NumSubarraysWithSumMap([]int{0, 0, 0, 0, 0, 1, 0, 0, 0}, 0))
	//fmt.Println(solution.NumSubarraysWithSum2P([]int{1, 0, 1, 0, 1}, 2))
	//fmt.Println(solution.NumSubarraysWithSumMap([]int{1, 0, 1, 0, 1}, 2))
	//fmt.Println(strconv.FormatInt(-5, 2))
	//fmt.Println(strconv.FormatInt(5, 2))
	//fmt.Println(strconv.FormatInt(-5 & 5, 2))
	//fmt.Println(solution.GenerateParenthesis(4))
	//fmt.Println(solution.FindItinerary([][]string{{"JFK", "SFO"}, {"JFK", "ATL"}, {"SFO", "ATL"}, {"ATL", "JFK"}, {"ATL", "SFO"}}))
	//fmt.Println(solution.Search([]int{4, 5, 6, 7, 1, 2, 3, 4}, 1))
	//fmt.Println(solution.CombinationSum([]int{1, 2, 4, 7, 8, 9, 34}, 40))
	//fmt.Println(solution.GroupAnagrams([]string{"aed", "ead", "dae"}))
	//fmt.Println(solution.SpiralOrder([][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}))
	//fmt.Println(solution.MaxSubArray([]int{-1, 3, 2, -5, 1, 4, -6}))
	//fmt.Println(solution.CanJump([]int{3, 2, 1, 0, 1}))
	//fmt.Println(solution.MergeIntervals([][]int{{3, 5}, {1, 3}, {1, 8}, {11, 14}}))
	//fmt.Println(solution.MyAtoi("   -9251235e3"))
	//fmt.Println(solution.Permute([]int{1, 2, 3, 4, 5}))
	//fmt.Println(solution.FindMin([]int{7, 8, 9, 1, 2, 3, 4, 5}))
	//fmt.Println(solution.CriticalConnections(4, [][]int{{0, 1}, {1, 2}, {2, 0}, {1, 3}}))
	//fmt.Println(solution.GetSum(123,999))
	//fmt.Println(solution.AddRungs([]int{3, 5, 8, 9, 10, 13}, 1))
	//fmt.Println(solution.LargestNumber([]int{9, 99, 90, 97, 5, 8, 9, 10, 13}))
	//fmt.Println(solution.UniquePaths(5, 8))
	//fmt.Println(solution.GetSum(123,999))
	//fmt.Println(solution.FindPeakElement([]int{5, 3, 1, 2, 3, 4, 5, 3}))
	//fmt.Println(solution.Divide(124124, 232))
	//fmt.Println(solution.Divide(math.MinInt32, -1))
	//fmt.Println(solution.TopKFrequent([]int{5, 3, 1, 1, 1, 3, 3, 6, 5, 12, 2, 3, 4, 5, 3}, 5))
	//fmt.Println(solution.Jump2([]int{5, 3, 1, 1, 1, 3, 3, 6, 5, 12, 2, 3, 4, 5, 3}))
	//fmt.Println(solution.MatrixRankTransform2([][]int{{11, 13}, {15, 17}}))
	//fmt.Println(solution.MatrixRankTransform2([][]int{{11, 13}, {15, 17}}))
	//fmt.Println(solution.InsertInterval([][]int{{1, 2}, {3, 4}, {8, 10}}, []int{1, 5}))
	//fmt.Println(solution.NumTeams([]int{1, 3, 5, 4, 7, 8, 2, 6}))
	//fmt.Println(solution.NumDecodings("987654321181724"))
	//fmt.Println(solution.SortArray([]int{1, 3, 5, 4, 7, 8, 2, 6}))
	//fmt.Println(solution.IsPalindrome("A man, a plan, a canal: Panama"))
	//fmt.Println(solution.LoudAndRich([][]int{{1, 0}, {2, 1}, {3, 1}, {3, 7}, {4, 3}, {5, 3}, {6, 3}}, []int{3, 2, 5, 4, 6, 1, 7, 0}))
	//fmt.Println(solution.LoudAndRich2([][]int{{1, 0}, {2, 1}, {3, 1}, {3, 7}, {4, 3}, {5, 3}, {6, 3}}, []int{3, 2, 5, 4, 6, 1, 7, 0}))
	//fmt.Println(solution.MaxProfitAssignment([]int{2, 4, 6, 8}, []int{10, 20, 40, 80}, []int{2, 3, 7, 12}))
	//fmt.Println(solution.DayOfYear("2012-03-24"))
	//fmt.Println(solution.ClimbStairs(20))
	//fmt.Println(solution.CrackSafe(3, 3))
	//zeroesMatrix := [][]int{{1, 1, 0}, {1, 0, 1}, {1, 1, 1}}
	//solution.SetZeroes(zeroesMatrix)
	//fmt.Println(zeroesMatrix)
	//fmt.Println(solution.CoinChange([]int{2, 3, 7}, 47))
	//fmt.Println(solution.ToGoatLatin("Each man speak Goat Latin"))
	//fmt.Println(solution.WordBreak("catsandog", []string{"cats", "dog", "sand", "and", "cat"}))
	//fmt.Println(solution.WordBreak("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", []string{"a", "aaa", "aaaaa", "aaaaaa", "aaaaaaaaaa"}))
	//fmt.Println(solution.MaxTurbulenceSize([]int{1, 1, 2, 1, 3, 2, 1, 2, 1, 4, 1, 6, 4, 5}))
	//fmt.Println(solution.HighestPeak([][]int{{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 1, 0}}))
	//fmt.Println(solution.IntervalIntersection([][]int{{1, 2}, {3, 7}, {10, 15}}, [][]int{{2, 3}, {4, 5}, {6, 7}, {13, 15}}))
	//fmt.Println(solution.IntervalIntersection([][]int{{1, 2}, {3, 7}, {10, 15}}, [][]int{{2, 3}, {4, 5}, {6, 7}, {13, 15}}))
	//fmt.Println(solution.Rob2([]int{3, 1, 3, 1, 3}))
	//fmt.Println(solution.Rob2([]int{3, 1, 3, 1, 1, 100}))
	//fmt.Println(solution.Trap([]int{1, 0, 4, 3, 2, 1, 0, 0, 4, 1, 3, 2, 4, 0, 0, 2}))
	//fmt.Println(solution.AddOperators("105", 5))
	dts := solution.NewDetectSquares()
	dts.Add([]int{5, 10})
	dts.Add([]int{15, 10})
	dts.Add([]int{15, 20})
	fmt.Println(dts.Count([]int{5, 20}))
}
